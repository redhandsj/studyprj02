//==========================================================================================================
// Spring徹底入門SpringFrameworkによるJavaアプリケーション開発.pdf
//==========================================================================================================
 - (CHAPTER 06) RESTful Webサービスの開発(P.307 - 360)
しおり　：　P.329 -- 検索条件なしで検索した場合のレスポンス例
URL　:
 - http://localhost:8080/RESTfulWeb01/

REST用URL
 - http://localhost:8080/RESTfulWeb01/books


★ 2016/12/10(土)に、RESTfulWeb01の勉強の為にSpringWebApplication01から派生して作成

//==========================================================================================================
// 6.1 REST APIのアーキテクチャ
//==========================================================================================================
★ Resource Oriented Architecture（ROA）
 - Web上のリソースとして公開
 - URIによるリソースの識別
 - HTTPメソッドによるリソースの操作（GET、POST、PUT、DELETEなど）
 - 適切なフォーマットの使用
 - 適切なHTTPステータスコードの使用
 - ステートレスなクライアント／サーバー間の通信
 - 関連のあるリソースへのリンク

★ フレームワークのアーキテクチャ
 - 画面を応答するWebアプリケーションとの主な違い
   (1) レスポンスボディを生成するためにViewの仕組みは利用しない
   (2) 「リクエストボディの解析」と「レスポンスボディの生成」はHttpMessageConverterというコンポーネントを介して行なう
 - (P.313)表 6.3　依存ライブラリを必要としない主な HttpMessageConverter の実装クラス

//==========================================================================================================
// 6.2 アプリケーションの設定
//==========================================================================================================
★ サーブレットコンテナの設定


//==========================================================================================================
// 6.3 @RestControllerの実装
//==========================================================================================================
★ Controllerで実装する処理の全体像
 - メソッドシグネチャを参照してフロントコントローラが処理を行なう「宣言型」の処理
   - リクエストマッピング
   - リクエストデータ（リソース）の取得
   - 入力チェックの実行

 - Controllerクラスのメソッド内に処理を実装する「プログラミング型」の処理
   - ビジネスロジックの呼び出し
   - レスポンスデータ（リソース）の返却
 
 - 画面応答のWebアプリと以下の2点が異なります。
   - リクエストデータとレスポンスデータはHttpMessageConverterを使用して取得および返却する
   - 入力チェック結果のハンドリングは例外ハンドラで共通的に行なう


★ Controllerクラスの作成
 - 


G:\tools\dev\curl-7.51.0-win64-mingw\bin\curl --help

★ 作成
G:\tools\dev\curl-7.51.0-win64-mingw\bin\curl -v -H "Accept: application/json" -H "Content-type: application/json" -X POST -d "{\"name\":\"Spring\",\"publishedDate\":\"2016-04-01\"}" http://localhost:8080/RESTfulWeb01/books/create

★ 更新
G:\tools\dev\curl-7.51.0-win64-mingw\bin\curl -D - -H "Content-type: application/json" -X PUT -d "{\"bookId\":\"00000000-0000-0000-0000-000000000000\",\"name\":\"ABCDEFG\",\"publishedDate\":\"2016-07-31\"}" http://localhost:8080/RESTfulWeb01/books/00000000-0000-0000-0000-000000000000

★ 削除
G:\tools\dev\curl-7.51.0-win64-mingw\bin\curl -D - -X DELETE http://localhost:8080/RESTfulWeb01/books/00000000-0000-0000-0000-000000000000


{
  "bookId" : "00000000-0000-0000-0000-000000000000",
  "name" : "書籍名",
  "publishedDate" : "2010-04-20"
}





G:\tools\dev\curl-7.51.0-win64-mingw\bin\curl -D - -H "Content-type: application/json" -X POST -d '{"name":"Spring徹底入門","publishedDate":"2016-04-01"}' http://localhost:8080/books


http://localhost:8080/RESTfulWeb01/books/00000000-0000-0000-0000-000000000000







//==========================================================================================================
★ とりあえずメモ




//==========================================================================================================
// <END>
//==========================================================================================================
