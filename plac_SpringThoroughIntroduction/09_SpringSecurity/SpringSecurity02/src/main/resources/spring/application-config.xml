<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	<context:property-placeholder location="classpath:spring/bean.properties" />
	
	<!-- Spring MVC	-->
	<!-- DispatchServletのセットアップ -->
	<mvc:annotation-driven/>
	<mvc:view-resolvers><mvc:jsp/></mvc:view-resolvers>
	
 	<!-- アノテーションによるBean配置などの処理を行えるようにしたもの -->
 	<context:annotation-config />
 	<!-- コンポーネントを検索するパッケージを指定 -->
	<context:component-scan base-package="jp.tuyano.spring" />
	
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="database" value="${jdbc.type}" />
			</bean>
		</property>
	</bean>
	
	<!-- jdbc  -->
	<jdbc:embedded-database id="dataSource" type="H2">
		<jdbc:script location="${jdbc.scriptLocation}" />
	</jdbc:embedded-database>

	<!-- リポジトリを検索するパッケージ -->
	<jpa:repositories base-package="jp.tuyano.spring" />
	<!-- リポジトリで使用する transactionManager -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- list_08_25 Validator用のBeanを登録 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- 監査情報の設定 -->
	<jpa:auditing auditor-aware-ref="auditorAware" />
	<bean id="auditorAware" class="jp.tuyano.spring.domain.service.OsUserAuditorAware" />

	<!-- Spring Security -->
	<!-- js,cssが配置されているパスは適用外にする-->
	<sec:http pattern="/resources/**" security="none"/>

	<sec:http auto-config="false" use-expressions="true" entry-point-ref="loginUrlAuthenticationEntryPoint">
		<!-- <sec:form-login login-processing-url="/authentication" username-parameter="uid" password-parameter="pwd" /> -->
		<!-- ログイン画面は全員アクセス可能 -->
		<sec:intercept-url pattern="/login" access="permitAll" />
		<!-- 他の画面はUSERロールをもっていないとアクセスできない -->
		<sec:intercept-url pattern="/**" access="isAuthenticated()" />
		<!-- ※ログインフォーム向けにある既存の認証処理を独自認証処理に置き換える。 -->
		<sec:custom-filter position="FORM_LOGIN_FILTER" ref="applicationUsernamePasswordAuthenticationFilter" />
		
	
		<!-- POST時にCSRFの検証も行う。処理自体は自動で行われる -->
		<sec:csrf/>
	</sec:http>

	<bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<!-- ※ログイン画面の指定。認証なしでアクセスするとここに飛ばされる。 -->
		<constructor-arg value="/login" />
	</bean>
	
	<bean id="applicationUsernamePasswordAuthenticationFilter" class="jp.tuyano.spring.auth.ApplicationUsernamePasswordAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<!-- 　※認証成功したあとに処理するハンドラーの指定 -->
		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
		<!-- ※認証失敗したあとに処理するハンドラーの指定。 -->
		<property name="authenticationFailureHandler" ref="authenticationFailureHandler" />
		<!-- ※認証を行うパス。ここに認証情報をつけてPOSTすると認証処理（filter）が実行される。 -->
		<property name="filterProcessesUrl" value="/authentication" />
	</bean>

	<bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
		<!-- ※認証成功した後の遷移先。↑ハンドラー自体は既存のものを利用。 -->
		<property name="defaultTargetUrl" value="/home"/>
	</bean>

	<bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
		<!-- ※認証失敗した後の遷移先。↑ハンドラー自体は既存のものを利用。 -->
		<property name="defaultFailureUrl" value="/login?error=true"/>
	</bean>
  
	<sec:authentication-manager alias="authenticationManager">
		<!-- ※認証されたユーザの情報を提供するプロバイダの指定。 -->
		<sec:authentication-provider ref="applicationUsernamePasswordAuthenticationProvider" />
	</sec:authentication-manager>

	<!-- ※認証通過時、認証ユーザの提供するプロバイダ。内容は後述。 -->
	<bean id="applicationUsernamePasswordAuthenticationProvider" class="jp.tuyano.spring.auth.ApplicationUsernamePasswordAuthenticationProvider" />

	<!-- 認証用のコンポーネントを定義 -->
	<!-- <sec:authentication-manager /> -->
	<!-- ユーザとROLEを定義-->
	<sec:authentication-manager>
		<sec:authentication-provider user-service-ref="accountUserDetailsService">
			<sec:password-encoder ref="passwordEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>
	<bean id="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- Open EntityManager in Viewパターンの設定 
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/**/*.html" />
			<mvc:exclude-mapping path="/**/*.js" />
			<mvc:exclude-mapping path="/**/*.css" />
			<mvc:exclude-mapping path="/**/*.png" />
			<bean class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	-->	
</beans>
