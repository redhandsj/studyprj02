★Spring徹底入門SpringFrameworkによるJavaアプリケーション開発.pdf
 - (CHAPTER 07) Spring MVC の応用 (P.361 - 400)
しおり　：P.
URL : 


//==========================================================================================================
// 7.1 HTTPセッションの利用
//==========================================================================================================
 - セッション属性（@SessionAttributes）の利用
 - セッションスコープのBeanの利用
 - HttpSessionのAPIの利用
 ※基本的にはHttpSessionのAPIを直接使用しない方法（Spring MVCの Servlet APIの抽象化の仕組み）を利用するようにしましょう

■7.1.1 セッション属性（@SessionAttributes）
 ⇒ P.363 の図 7.1
 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@ModelAttributeのvalue属性を省略すると、@ModelAttributeメソッドから返却されるオ
ブジェ クトの属性名を生成するために、すべてのリクエストで@ModelAttributeメソッドが呼び出されます
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 - オブジェクトの削除
   @RequestMapping(path = "create", params = "complete", method = RequestMethod.GET) 
   public String createComplete(SessionStatus sessionStatus) {
     sessionStatus.setComplete(); // ← ここ
     return "account/createComplete";
   }
   - @SessionAttributesで指定した管理対象オブジェクトがすべて削除される
   - sessionStatus.setComplete(); コール時はマークのみ
   - 実際にはControllerのHandlerメソッド の処理が終了した後に、フレームワークがHTTPセッションからオブジェクトを削除

 - Viewからアクセスする方法
   - リクエスト時と同じ方法


■7.1.2 セッションスコープBean
 - 複数のControllerをまたぐ画面遷移において、Controller間でデータを共有 する場合に有効な方法
   ⇒ P.366 の図 7.2

 - セッションスコープBeanの定義
   ⇒ Cart.java
   ⇒ P.368の例

 - Viewからアクセスする方法
   ⇒ <spring:eval var="cart" expression="@cart" />

//==========================================================================================================
// 7.2 ファイルアップロード
//==========================================================================================================
 - Servlet標準のアップロード機能
 - Apache   Commons FileUpload のアップロード機能 

■7.2.1 ファイルアップロードの仕組み
 ⇒ P.370 の図 7.3


■7.2.2 ファイルアップロード機能のセットアップ
 - Servlet標準とSpringのファイルアップロード機能
 - ファイルアップロード機能を利用するための設定
   - （web.xml）に <multipart-config>

 - Spring MVCと連携するための設定


■7.2.3 アップロードデータの取得








//==========================================================================================================
// 7.3 非同期リクエストの実装
//==========================================================================================================

■7.3.1 非同期リクエストの仕組み
 - 非同期実行が終了してからHTTPレスポンスを開始
  ⇒ P.374 の図7.4

   - Spring MVC管理のスレッドを使用した非同期処理 
   - Spring   MVC管理外のスレッドを使用した非同期処理

 - 非同期実行の処理中にHTTPレスポンスを開始 
  ⇒ P.376 の図 7.5
   - ロングポーリングを使用した非同期処理
   - SSE（Server-Sent    Events）【4】に準拠した非同期処理


■7.3.2 非同期実行を有効にするための設定


■7.3.3 非同期処理の実装
 - @Asyncの利用
   @Async  
   // 別スレッドで実行される
   public void save(InputStream in, File file) {    // ・・・ }

 - CompletableFutureを使用した非同期処理の実装
  ⇒ P.380の例

 - SseEmitterを使用したPush型の非同期処理の実装 


■7.3.4 非同期実行の例外ハンドリング
 - 非同期処理中に発生した例外は、 最終的にはSpring MVCのExceptionResolverによってハンドリングされます
   

■7.3.5 非同期実行に対する共通処理の実装
 - CallableProcessingInterceptor
 - DeferredRes ultProcessingInterceptor
   ※ 上記クラスには、共通して以下のメソッドが備わっている
   ⇒ P.382 の表 7.2






//==========================================================================================================
// 7.4 共通処理の実装
//==========================================================================================================
■7.4.1 サーブレットフィルタの利用

 - GenericFilterBean

 - OncePerRequestFilter
   ⇒ P.384 の例

 - DIコンテナで管理しているBeanのインジェクション

 - Spring提供のサーブレットフィルタ 
  ⇒ P.386 の表 7.4


■7.4.2 HandlerInterceptorの利用
 ⇒ P.387 の表 7.5
 ⇒ P.387 の図 7.6


■7.4.3 @ControllerAdviceの利用
 - GlobalExceptionHandler
   ⇒ P.389 の表 7.6 @ControllerAdviceの属性
   

■7.4.4 HandlerMethodArgumentResolverの利用
 - Spring MVCのデフォルトでサポートされていないオブジェクトをControllerのHandlerメソッドの引数に渡 したい場合
   ⇒ P.390 の例

 ※ 省略


//==========================================================================================================
// 7.5 静的リソース
//==========================================================================================================
 - Webアプリケーションのドキュメントルート
 - MavenやGradleプロジェクトではあればsrc/main/webapp


■7.5.1 デフォルトサーブレットとDispatcherServletの共存
 - configureDefaultServletHandling
 

■7.5.2 Spring MVC独自の静的リソース解決の仕組み
 - 任意のディレクトリに格納されているファイルへのアクセス 
 - ResourceResolverとResourceTransformerの利用
 - バージョン付きの公開パスを使用した静的リソースへのアクセス 


//==========================================================================================================
// 7.6 国際化
//==========================================================================================================

■7.6.1 ロケールの解決
 - デフォルトではAcceptHeaderLocaleResolver
   ⇒ P.397 の表 7.9


■7.6.2 ロケールの利用


■7.6.3 UIを使用したロケールの切り替え
 - LocaleResolverのBean定義
 - LocaleChangeInterceptorのBean定義




########## P.400 ###############################



//==========================================================================================================
//==========================================================================================================
// 問題
//==========================================================================================================
★ FileUploadController
　ファイルアップロード
   ⇒ http://www.technicalkeeda.com/spring-tutorials/spring-4-mvc-file-upload-example


//==========================================================================================================
// 未整頓メモ
//==========================================================================================================
★ サーブレットフィルタ
 ⇒ http://otndnld.oracle.co.jp/document/products/as10g/1013/doc_cd/web.1013/B28596-01/filters.htm

★ サーブレット
 ⇒ https://www.sejuku.net/blog/10496
 ⇒ http://www.atmarkit.co.jp/ait/articles/0301/09/news001.html



//==========================================================================================================
// <END>
//==========================================================================================================
