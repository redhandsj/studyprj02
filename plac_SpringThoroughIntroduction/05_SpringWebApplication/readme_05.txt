★Spring徹底入門SpringFrameworkによるJavaアプリケーション開発.pdf
 - (CHAPTER 05) Webアプリケーションの開発 (P.203 - 306)
しおり　：P.
URL : 

//==========================================================================================================
// 5.1 アプリケーションの種類
//==========================================================================================================
■5.1.1 画面を応答するWebアプリケーション
 ⇒ P.204の図


■5.1.2 データのみを応答するwebアプリケーション
 - SSE（Server-Sent Events）


//==========================================================================================================
// 5.2 アプリケーションの設定
//==========================================================================================================
■5.2.1 サーブレットコンテナの設定
 - ContextLoaderListener、DispatcherServlet、CharacterEncodingFilter
 - AbstractAnnotationConfigDispatcherServletInitializer


■5.2.2 アプリケーションコンテキストの設定
 - PropertySourcesPlaceholderConfigur erはプロパティ値（JVMのシステムプロパティ、環境変数、
   プロパティファイルに定義した値）をDIコンテナで管理しているコンポーネントにインジェクションするための
   コンポーネント


■5.2.3 フロントコントローラの設定
 - Java Configを使用する場合はコン フィギュレーションクラスに@EnableWebMvcを追加



//==========================================================================================================
// 5.3 @Controllerの実装
//==========================================================================================================
 - 画面を応答するWebアプリケーションを開発する際に作成する主要なコンポーネント
   - Controllerクラス
   - フォームクラス
   - JSPなどのテンプレートファイル（View）


■5.3.1 Controllerで実装する処理の全体像
 ⇒ P.208の表と図


■5.3.2 Controllerクラスの作成
 ⇒　org.rhpj.controller.WelcomeController
 
■5.3.3 Handlerメソッドの作成

■5.3.4 Handlerメソッドの引数
 - 指定可能な主な型  ⇒ P.211の表5.2
 - 指定可能な主なアノテーション  ⇒ P.211の表5.3
 - リクエストデータ以外の情報を引数として指定可能なアノテーション ⇒ P.211の表5.4


■5.3.5 Handlerメソッドの戻り値
 - 指定可能な主な型  ⇒ P.213の表5.5
 - 指定可能な主なアノテーション ⇒ P.213の表5.6


■5.3.6 View Controllerの利用


//==========================================================================================================
// 5.4 リクエストマッピング
//==========================================================================================================
 - @RequestMapping
   - 属性値 ⇒ P.215の表5.8
   - @RequestMappingの合成アノテーション（@GetMapping、@PostMapping、@PutMap ping、＠DeleteMapping、@PatchMapping）が追加
   
■5.4.1 リクエストパスの使用
 - 複数の属性値を指定した場合はOR条件

■5.4.2 パスパターンの使用

■5.4.3 HTTPメソッドの使用
 - 複数の属性値を指定した場合はOR条件


■5.4.4 リクエストパラメータの使用
 - @RequestMapping(path = "create", params = "form")
    ↓
   "/accounts/create?form="というURLでアクセスするとformメソッドが実行
 - 複数の属性値を指定した場合はAND条件


■5.4.5 リクエストヘッダーの使用
 - @RequestMapping(headers = "X-Migration=true")

■5.4.6 Content-Typeヘッダーの使用
 - @RequestMapping(consumes = "application/json")

■5.4.7 Acceptヘッダーの使用
 - @RequestMapping(path = "create", produces = "application/json")


//==========================================================================================================
// 5.5 リクエストデータの取得
//==========================================================================================================

■5.5.1 パス変数値の取得（@PathVariable）
  @RequestMapping(path = "accounts/{accountId}", method = RequestMethod.GET)
  public String detail(@PathVariable String accountId) {
      // ・・・ 
  }


■5.5.2 リクエストパラメータ値の取得（@RequestParam）
  @RequestMapping(path = "detail", method = RequestMethod.GET)
  public String detail(@RequestParam String format) {
      // ・・・ 
  }


■5.5.2 リクエストパラメータ値の取得（@RequestParam）



■5.5.3 @RequestParam、@RequestHeader、 @CookieValueの属性値


■5.5.4 コンパイルオプションの注意点


■5.5.5 利用可能な型
 - プリミティブ型（int、booleanなど）およびそれらのラッパー型（Integer、Booleanなど）
 - 値を表現する型（String、Dateなど）
 - MultipartFile


■5.5.6 バインディング処理のカスタマイズ（WebDataBinder）
 - addCustomFormatter 
 - registerCustomEditor
 

■5.5.7 アノテーションを使用したフォーマットの指定
 - @org.springframework.format.annotation.DateTimeFormat
 - @org.springframework.format.annotation.NumberFormat


//==========================================================================================================
// 5.6 フォームクラスの実装
//==========================================================================================================

■5.6.1 フォームオブジェクトのスコープ

 - リクエストスコープ
   - リクエスト内でオブジェクトを共有（デフォルト）

 - フラッシュスコープ
   - PRG（Post Redirect Get）パターンのリクエスト間（POSTとリダイレクト後のGETの2つのリクエ スト間）で
     オブジェクトを共有

 - セッションスコープ
   - 同一セッション内の複数のリクエストでオブジェクトを共有


■5.6.2 フォームクラスの作成


■5.6.3 HTMLフォームとのバインディング


■5.6.4 シンプル型とのバインディング


■5.6.5 シンプル型のコレクションとのバインディング
  <input type="checkbox" name="roles" value="1"> 利用者 
  <input type="checkbox" name="roles" value="2"> 承認者 
  <input type="checkbox" name="roles" value="3"> システム管理者 

■5.6.6 ネストしたJavaBeansとのバインディング


■5.6.7 コレクション内のJavaBeansとのバインディング


■5.6.8 プロパティ値のリセット
 - リセット用のリクエストパラメータは、データバインディング用のリクエストパラメータの名前の先頭に
   「_」 （アンダースコア）を付けたものです。たとえば、rolesという名前のプロパティに対する
   リセット用のリクエストパラメータは、_rolesという名前になります。 


//==========================================================================================================
// 5.7 入力チェック
//==========================================================================================================
■5.7.1 入力チェックの有効化
 - @org.springframe work.validation.annotation.Validated


■5.7.2 入力チェック結果の判定
 ⇒ P.239 の表5.14

■5.7.3 未入力の扱い
 - org.springframework.beans.propertyeditors.StringTrim merEditor


■5.7.4 入力チェックルールの指定
 - 制約アノテーションの予約属性
   ⇒　P.244 の 表5.19


■5.7.5 ネストしたJavaBeansの入力チェック


■5.7.6 入力チェックルールの追加
 - 既成ルールを合成して作成する方法
   ⇒ @org.rhpj.validation.AlphaNumeric
 - 独自のバリデータを実装して作成する方法


■5.7.7 入力チェックルールの切り替え


■5.7.8 エラー情報の表示


■5.7.9 エラーメッセージの解決
 ⇒ P.252 の図 5.15
 - message.properties
   - 制約アノテーションのクラス名＋「.」＋フォームオブジェクトの属性名＋「 .」＋プロパティ名
     - NotNull.accountForm.name = アカウント登録者の氏名を入力してください。

   - 制約アノテーションのクラス名＋「.」＋フォームオブジェクトの属性名
     - NotNull.name = 名前を入力してください。 

   - 制約アノテーションのクラス名＋「.」＋プロパティ名

   - 制約アノテーションのクラス名＋「.」＋プロパティの型名（FQCN）
     - NotNull.java.lang.String = 文字列を入力してください。 

   - 制約アノテーションのクラス名
     - NotNull = 値を入力してください。

 - Bean Validation管理のプロパティファイルにエラーメッセージを定義 
   - 制約アノテーションのクラス名（FQCN）+ .message
     - NotNull = 値を入力してください。

 - message属性にメッセージを定義 
   - @NotNull(message = "入力してください。") 

 - プロパティの論理名の定義
   - フォームオブジェクトの属性名＋「 .」＋プロパティ名 
     - accountForm.name = アカウント名
   - プロパティ名
     - name = 名前


■5.7.10 Bean Validationのカスタマイズ
 - org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean



■5.7.11 Spring Validatorの利用
 - Spring Validator経由でBean Validationの機能を利用する方法
   ⇒ ※省略


//==========================================================================================================
// 5.8 画面遷移
//==========================================================================================================
■5.8.1 遷移先の指定方法

■5.8.2 リクエストパスへのリダイレクト

■5.8.3 リクエストパスへのフォワード

■5.8.4 Viewとのデータ連携
 - ModelのAPIを直接呼び出す

 - ModelAttributeアノテーションを付与したメソッドを用意する
   - @ModelAttributeメソッドの利用

 - リクエストスコープ、フラッシュスコープ、セッションスコープ


■5.8.5 リダイレクト先とのデータ連携



//==========================================================================================================
// 5.9 Viewの解決
//==========================================================================================================

■5.9.1 テンプレートベースのView
 ⇒ P.266 の表5.22
 ⇒ P.266 の表5.23
 

■5.9.2 InternalResourceViewResolverのBean定義
 ⇒ WebMvcConfig

//==========================================================================================================
// 5.10 JSPの実装
//==========================================================================================================
■5.10.1 ディレクティブ
 - pageディレクティブ
   ⇒ P.268 の表5.24 pageディレクティブで指定できる主な属性

 - taglibディレクティブ

 - includeディレクティブ


■5.10.2 スクリプトレット
 - <% ... %>や<%= ... %>という記述の中にJavaコードを埋め込む

    ↓

 - 今では、JSTL（JavaServer Pages Standard Tag Library）などのカスタムタグライブラリとEL式を組み合わせてJSPを実装するのが一般的



■5.10.3 カスタムタグライブラリ
 - <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> 
 

■5.10.4 タグファイル
 - /WEB-INF/tags/printTokens.tag
    ↓
 - <%@ taglib prefix="myTags" tagdir="/WEB-INF/tags" %>
   <myTags:printTokens tokensString="スポーツ,映画,音楽" />
    ↓ 
 - <%@ attribute name="tokensString" type="java.lang.String" required="true"%>


■5.10.5 EL（Expression Language）
 - JSPでは、ELと呼ばれる式言語を使用して値の参照、出力、演算を行なうことができます。EL式は、${...} （または#{...}）という形式で記述します。 
   ⇒ P.272 の表5.28

■5.10.6 EL関数
  <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
  <span>${fn:escapeXml(form.memo)}</span>


■5.10.7 JSPの共通設定
 - web.xml → <jsp-config>要素


■5.10.8 JSTLの利用
 ⇒ P.274 の表5.30

 - core タグライブラリ
  ⇒ P.275 の表5.31

 - fmt タグライブラリ
  ⇒ P.276 の表5.32

 - functions タグライブラリ
  ⇒ P.276 の表5.33



//==========================================================================================================
// 5.11 SpringのHTMLフォーム用タグライブラリの利用
//==========================================================================================================
⇒ P.277 の表5.34 Spring MVCが提供するHTMLフォーム出力用のカスタムタグの一覧

■5.11.1 タグライブラリのセットアップ
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>


■5.11.2 フォームの出力
 - RequestDataValueProcessorとの連携

■5.11.3 フォーム項目の共通的な属性
 ⇒ P.278 の表5.36


■5.11.4 テキストフィールドの出力
 - ユーザー名：<form:input path="username"/>


■5.11.5 パスワードフィールドの出力
 - パスワード：<form:password path="password"/>


■5.11.6 テキストエリアの出力
 - ご意見・ご要望：<form:textarea path="opinionsAndRequests"/>
    
■5.11.7 複数チェックボックスの出力


■5.11.8 チェックボックスの出力


■5.11.9 複数ラジオボタンの出力


■5.11.10 ラジオボタンの出力


■5.11.11 セレクトボックスの出力
  ⇒ P.283 の表5.41
 - <form:option>と<form:options>の利用
  ⇒ P.284 の表5.42
  ⇒ P.284 の表5.43


■5.11.12 隠しフィールドの出力
 - <form:hidden path="gender"/>

■5.11.13 ラベルの出力
 - <form:label path="opinionsAndRequests">ご意見・ご要望</form:label>： 
   <form:textarea path="opinionsAndRequests"/>


■5.11.14 ボタンの出力
 - <form:button name="confirm">確認</form:button>


■5.11.15 入力チェックエラーの出力
 - 利用規約：<form:checkbox path="agreement" value="true" label="同意する"/>
             <form:errors path="agreement"/>


//==========================================================================================================
// 5.12 Springの羽生タグライブラリの利用
//==========================================================================================================
 ⇒ P.287 の表5.47 <spring:*>

■5.12.1 タグライブラリのセットアップ


■5.12.2 ロケール別のメッセージの出力


■5.12.3 テーマ別のメッセージの出力


■5.12.4 入力チェックエラーの判定


■5.12.5 バインディング情報（BindStatus）の取得
 ⇒ P.291 の表5.53
 

■5.12.6 BindStatusと連携した文字列変換
 ⇒ P.291


■5.12.7 URLの生成


■5.12.8 エスケープ有無のデフォルトの上書き
 - エスケープを行う
   <spring:htmlEscape defaultHtmlEscape="true"/>


■5.12.9 出力値のエスケープ
 - <spring:escapeBody htmlEscape="true">${message}</spring:escapeBody>
 

■5.12.10 SpELの実行結果の取得
 ⇒ /SpringWebApplication001/src/main/java/org/rhpj/domain/setting/AppSettings.java


■5.12.11 リクエストマッピング情報と連携したURLの生成
 - <a href="${spring:mvcUrl('MC#view').build()}">メニューへ</a>


//==========================================================================================================
// 5.13 例外ハンドリング
//==========================================================================================================

■5.13.1 例外の種類
 - システム例外
   - 処理を継続することができない例外（アプリケーション自体のバグ、依存ライブラリのバグ、ミドルウェア やハードウェアの故障、システムリソースの枯渇、ネットワーク障害など）

 - リクエスト不正を通知する例外
   - リクエストの内容が不正なときに発生する例外（存在しないパスへのリクエスト、バインディングエラー、 入力チェックエラーなど）

 - アプリケーション例外
   - ビジネスルールに違反したときに発生する例外（ユーザー登録時のIDの重複エラー、排他エラー、在庫数の不足エラーなど）


■5.13.2 例外の発生個所とハンドリング方法
 ⇒ P.298 の 図 5.18
 - Servlet  Filter
 - View（JSPなど）
   - サーブレットコンテナのエラーページ機能 （web.xmlの<error-page>要素）を使用してエラー処理を実装

 - DispatcherServlet
   - Spring MVCが提供する例外ハンドリングの仕組み（HandlerExceptionResolver）を使用してエラー処理を実装

 - アプリケーション（Controller、Service、Repositoryなど）
   - プログラム内での try～catchやSpring MVCが提供する例外ハンドリングの仕組み（HandlerExceptionResolver）を使用 してエラー処理を実装

 - 例外ハンドリングの方法


■5.13.3 サーブレットコンテナのエラーページ機能の利用
 - web.xml
  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/error/systemError.jsp</location>
  </error-page>

 - エラーページで参照可能なエラー情報
  ⇒ P.300 の表 5.62 

 - 型階層の扱い
   - 例外の型を使用してエラーページの定義を行なった場合は、発生した例外クラスと型階層が最も近い定義が 適用されます
   ⇒ P.300 の 例

 - 原因例外の扱い


■5.13.4 Spring MVCの例外ハンドラの利用
 ⇒ P.301 の表 5.63
 ⇒ P.303 の表 5.64


■5.13.5 @ExceptionHandlerメソッドの利用
 ⇒ GlobalExceptionHandler
 ⇒ P.305 の表 5.65
 ⇒ P.306 の表 5.66


■5.13.6 @ResponseStatusを指定した例外クラスの利用
 - 例外処理としてステータスコードのみを設定すればよい場合は、@org.springframework.web.bind.annota tion.ResponseStatusを付与した例外クラスを作成することで実現することができます




########## P.306 ####################


//==========================================================================================================
//==========================================================================================================
// 問題
//==========================================================================================================
★
/SpringWebApplication001/src/main/webapp/WEB-INF/view/index.jsp
<%--
<spring:theme code="stylesheet" var="stylesheet"/>
<link rel="stylesheet" href="/resources/${stylesheet}">
 --%>




//==========================================================================================================
// 未整頓メモ
//==========================================================================================================
javax.validation.constraints.NotNull.message = 入力して下さい。
javax.validation.constraints.Size.message = {0}は{min}文字以上{max}文字以下で入力してください。
ValidationMessages.properties






//==========================================================================================================
// <END>
//==========================================================================================================
