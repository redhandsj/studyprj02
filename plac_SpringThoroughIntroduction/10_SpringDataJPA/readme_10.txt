★Spring徹底入門SpringFrameworkによるJavaアプリケーション開発.pdf
 - (CHAPTER 10) Spring Data JPA (P.493 - 535)
URL : 
12/13 - 12/15

//==========================================================================================================
// 10.1 JPA(Java Persistence API)とは
//==========================================================================================================
 - JPA は Java標準のORM

■10.1.1 ORMとJPAの概念
 - JPA実装は独立的
 - OSSでも提供されている（EclipseLink、Hibernate ORM、Apache OpenJPA、DataNucleusなど）


■10.1.2 Entity
 - DB上の永続化されたデータをマッピングするJava Object
 - POJO
 - アノテーションで実装
 - デフォルトのマッピングルール
 - テーブルをEntityに合わせる設計思想（Configuration by Exception）

■10.1.3 EntityManager
 - @PersistenceContext
   private EntityManager entityManager; 

 - 永続コンテキストでEntityを管理
   → P.497 の図と表

 - 永続コンテキストはキャッシュの役割があり、操作即座にSQL発行ではない
   - flush や コミットで発行

 - 永続コンテキストはトランザクション単位


■10.1.4 Entityの状態
  → P.500の図
 - new
 - 管理
 - 分離
 - 削除済み


■10.1.5 関連
 - @ManyToOne @OneToMany → 自分：相手
 - @OneToManyの場合、Listではなくsetを使用すると同一性評価に支障
 - 関連Entityの取得が簡単
   → P.503のメソッド

   - Lazyフェッチ
     - 関連Entityが格納されているプロパティへの初アクセス時にSQL発行

   - Eagerフェッチ（@OneToOne, @ManyToone）
     - 本体EntityにAPIが実行されたタイミング

   - フェッチを明示的にしたい場合
     @OneToMany(mappedBy = "room", cascade=CascadeType.ALL, fetch=FetchType.EAGER)



■10.1.6 JSQL(Java Persistence Query Language)
 - JPQL
   → P.504の例
   - Named Query でJPQLに命名可能


//==========================================================================================================
// 10.2 JPAを用いたデータベースアクセスの基本
//==========================================================================================================
■10.2.1 JPAによるCRUD操作
 → P.505 の例
   - SpringのDI機能により@PersistenceContextによるEntityManagerの注入が可能
   - Springが提供するトランザクション管理機能である@Transactionalアノテーション
   - findメソッドで取得されたEntityは管理状態
   - persistメソッドにより、新たに作成し new状態となっているEntityを管理状態へ移行
     - トランザクション終了時にDBに反映
   - 取得した Entityはすでに管理状態であるため、トランザクション終了時に変更がデータベースへ反映

■10.2.2 JPAによるJPQLを用いたデータアクセス
 - 関連を持つEntityに対してSELECT文のJPQLを実行した場合、関連Entityプロパティのデータが読み込ま れるタイミングはフェッチの種類により異なる
 - Lazyフェッチの場合は最悪で、関連Entityの件数分だけSQLが発行される可能性 があります
 - JOIN FETCH句を使用すると
   - 本体Entityと関連Entityの両方を　!!! 1回のSQL実行 !!! で読み込む

 - 更新
   → P.508 の例
   - 更新系の場合はTypedQueryではなくQueryを使用
   - executeUpdateメソッドは、SQLは即時実行


■10.2.3 排他制御
 - 楽観ロック
 - 悲観ロック
   - 共有ロック
   - 排他ロック（バージョンあり・なし）


//==========================================================================================================
// 10.3 Spring Data JPA
//==========================================================================================================
■10.3.1 Spring Dataとは

■10.3.2 Spring Data JPA とは


 //==========================================================================================================
// 10.4 Spring Data JPA のアーキテクチャ
//==========================================================================================================
■10.4.1 内部処理の流れ
 - EntityManagerのAPI呼び出しを内部にラップしている
   - SimpleJpaRepository等
     → P.514の図

■10.4.2 JpaRepository
 - JpaRepository の継承
   → P.515の例
   → P.516の表 → P.500の表と

■10.4.3 例外の変換
 - @EnableJpaRepositories によって例外ハンドリング
 - DataAccessException ビジネスロジックでの例外ハンドリング
   - P.517 の 表
   - SQL実行のタイミングで補足される為、flushなどを活用する必要がある
     → P.518の例

//==========================================================================================================
// 10.5 Spring Data JPA のセットアップ
//==========================================================================================================
 ⇒　04_SpringMVC\SpringMVC001 に追加する形で進める


########## P.517 ####################



//==========================================================================================================
// 10.6 Repository の作成と適用
//==========================================================================================================




//==========================================================================================================
//==========================================================================================================
// 問題
//==========================================================================================================

//==========================================================================================================
// 未整頓メモ
//==========================================================================================================
★ Serializableについて
 - https://qiita.com/Sekky0905/items/b3c6776d10f183d8fc89


★ 楽観的ロックと悲観的ロック
 - http://k-webs.jp/javaindex/post-1881




//==========================================================================================================
// <END>
//==========================================================================================================
